import re
from req import MyClass

x = MyClass()
territories = ['год',
               'текущий', 'прошлый',
               'дефицит', 'расходы', 'доля',
               'образование', 'среднее', 'начальное', 'высшее',
               'объем', 'общий', 'общем',
               'плановый', 'запланированный', 'фактический', 'бюждет', 'этот',
               'Российская Федерация', 'Россия', 'РФ',
               'Северо-Кавказский федеральный округ',
               'Ставропольский край',
               'Республика Ингушетия',
               'Республика Дагестан',
               'Кабардино-Балкарская Республика',
               'Республика Северная Осетия - Алания',
               'Карачаево-Черкесская Республика',
               'Чеченская республика',
               'Южный федеральный округ',
               'Краснодарский край',
               'Астраханская область',
               'Волгоградская область',
               'Ростовская область',
               'Республика Адыгея', 'Адыгея',
               'Республика Калмыкия',
               'Приволжский федеральный округ',
               'Нижегородская область',
               'Кировская область',
               'Самарская область',
               'Оренбургская область',
               'Пензенская область',
               'Пермский край',
               'Саратовская область',
               'Ульяновская область',
               'Республика Башкортостан',
               'Республика Марий Эл',
               'Республика Мордовия',
               'Республика Татарстан',
               'Удмуртская республика', 'Удмуртия',
               'Чувашская Республика', 'Чувашия',
               'Северо-Западный федеральный округ',
               'Архангельская область',
               'Ненецкий автономный округ',
               'Вологодская область',
               'Калининградская область',
               'Санкт-Петербург',
               'Ленинградская область',
               'Мурманская область',
               'Новгородская область',
               'Псковская область',
               'Республика Карелия',
               'Республика Коми',
               'Сибирский федеральный округ',
               'Алтайский край',
               'Красноярский край',
               'Кемеровская область',
               'Иркутская область',
               'Новосибирская область',
               'Омская область',
               'Томская область',
               'Забайкальский край',
               'Республика Бурятия',
               'Республика Алтай',
               'Республика Тыва',
               'Республика Хакасия',
               'Уральский федеральный округ',
               'Курганская область',
               'Свердловская область',
               'Тюменская область',
               'Ханты-Мансийский автономный округ - Югра',
               'Ямало-Ненецкий автономный округ',
               'Челябинская область',
               'Центральный федеральный округ',
               'Белгородская область',
               'Брянская область',
               'Владимирская область',
               'Воронежская область',
               'Ивановская область',
               'Тверская область',
               'Калужская область',
               'Костромская область',
               'Курская область',
               'Липецкая область',
               'Москва',
               'Московская область',
               'Орловская область',
               'Рязанская область',
               'Смоленская область',
               'Тамбовская область',
               'Тульская область',
               'Ярославская область',
               'Дальневосточный федеральный округ',
               'Приморский край',
               'Хабаровский край',
               'Амурская область',
               'Камчатский край',
               'Магаданская область',
               'Сахалинская область',
               'Чукотский автономный округ',
               'Республика Саха', 'Якутия',
               'Еврейская автономная область',
               'Крымский федеральный округ',
               'Республика Крым',
               'Севастополь',
               'Байконур']
useless_pile_of_crap = [
    'в', 'без', 'до', 'из', 'к', 'на', 'по', 'о', 'от', 'перед', 'при', 'через', 'с', 'у', 'за', 'над', 'об', 'под', 'про', 'для',
    'республика'	'республики'
	'республики',	'республик',
	'республике',	'республикам',
    'республику',	'республики',
	'республикой',
    'республикою',	'республиками',
	'республике',	'республиках',
    'область', 'области', 'областью', 'областей', 'областям', 'областями', 'областях']
list_of_int = []
useless_word_in_sen = []
def RepresentsInt(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
"""
for i in range(len(useless_pile_of_crap)):
    useless_pile_of_crap[i] = useless_pile_of_crap[i].lower()
"""
# the Levenstein distance algorithm
def distance(a: object, b: object) -> object:
    """Calculates the Levenshtein distance between a and b."""
    n, m = len(a), len(b)
    if n > m:
        # Make sure n <= m, to use O(min(n,m)) space
        a, b = b, a
        n, m = m, n

    current_row = range(n + 1)  # Keep current and previous row, not entire matrix
    for i in range(1, m + 1):
        previous_row, current_row = current_row, [i] + [0] * n
        for j in range(1, n + 1):
            add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1]
            if a[j - 1] != b[i - 1]:
                change += 1
            current_row[j] = min(add, delete, change)

    return current_row[n]


# Основная функция
def check_the_territories(str_user):
    minimum_value = 123
    index_of_the_most_likely_variant = 0
    i = 0
    for _ in territories:
        distance_between_input_and_table_data = distance(str_user, territories[i])
        if distance_between_input_and_table_data < minimum_value:
            minimum_value = distance_between_input_and_table_data
            index_of_the_most_likely_variant = i
        i += 1

    return index_of_the_most_likely_variant

s = input()
s = re.sub(r'[^\w\s]', '', s)
list1 = s.split()
for i in range(len(list1)):
    if RepresentsInt(list1[i]):
        print(list1[i])
        list_of_int.append(list1[i])
        #list1.remove(list1[i])

print(list1)
print(list_of_int)


for s in useless_pile_of_crap:
    if s in list1:
        list1.remove(s)

for s in list_of_int:
    if s in list1:
        list1.remove(s)

print(list1)

list2 = []

i = 0
for _ in list1:
    result = check_the_territories(list1[i])
    print(territories[result])
    list2 = territories[result]
    i += 1

