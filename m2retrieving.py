
# Module, which is responsible for getting required from user data
class M2Retrieving:
    @staticmethod
    def get_data(input_string):
        """Getting JSON data based on input parameters"""

        # 1. Преобразовать входную строку в лист                                -> get_data
        params = input_string.split(',')

        # 2. Создать мэп списка                                                 -> _list_to_map
        mapper = M2Retrieving._list_to_map(params)

        # 3. Проверить какому из существующих мэпов соответствует данный мэп
        # 4. Получить MDX запрос для мэпа                                       -> _get_mdx_skeleton_for_map

        mdx_skeleton = M2Retrieving._get_mdx_skeleton_for_mapper(mapper)
        if len(mdx_skeleton) == 0:
            return False
        else:
            # 5. Подставить в MDX запрос вместо "*1, *2, *3 и тд" параметры
            # 6. Отправить MDX запрос                                           -> _refactor_mdx_skeleton
            mdx_query = M2Retrieving._refactor_mdx_skeleton(mdx_skeleton, params)
            result = M2Retrieving._send_mdx_request(mdx_query)
            if len(result == 0):
                return False
            return result

    @staticmethod
    def _list_to_map(parameters):
        return

    @staticmethod
    def _get_mdx_skeleton_for_mapper(mapper):
        return

    @staticmethod
    def _refactor_mdx_skeleton(mdx_skeleton, params):
        return

    @staticmethod
    def _send_mdx_request(mdx_query):
        return

    _places = {  2:	'Российская  Федерация',
            91128: 'Крымский федеральный округ',
            91129:	'Республика Крым',
            91139:	'г. Севастополь',
            93015:	'г. Байконур',
            24604:	'Северо-Кавказский федеральный округ',
            3086:	'Ставропольский край',
            2135:	'Республика Ингушетия',
            4:	'Республика Дагестан',
            2374:	'Кабардино-Балкарская Республика',
            2507:	'Республика Северная Осетия - Алания',
            1354:	'Карачаево-Черкесская Республика',
            2136:	'Чеченская республика',
            3:	'Южный федеральный округ',
            749:	'Краснодарский край',
            1176:	'Астраханская область',
            1512:	'Волгоградская область',
            2622:	'Ростовская область',
            1451:	'Республика Адыгея (Адыгея)',
            2006:	'Республика Калмыкия',
            3417:	'Приволжский федеральный округ',
            4439:	'Нижегородская область',
            7726:	'Кировская область',
            5140:	'Самарская область',
            5483:	'Оренбургская область',
            9475:	'Пензенская область',
            24541:	'Пермский край',
            8860:	'Саратовская область',
            6097:	'Ульяновская область',
            3418:	'Республика Башкортостан',
            9301:	'Республика Марий Эл',
            7265:	'Республика Мордовия',
            6265:	'Республика Татарстан (Татарстан)',
            9907:	'Удмуртская республика',
            8208:	'Чувашская Республика - Чувашия',
            10249:	'Северо-Западный федеральный округ',
            11867:	'Архангельская область',
            10575:	'Ненецкий автономный округ',
            10809:	'Вологодская область',
            10293:	'Калининградская область',
            11755:	'г. Санкт-Петербург',
            11404:	'Ленинградская область',
            10250:	'Мурманская область',
            11182:	'Новгородская область',
            10330:	'Псковская область',
            11627:	'Республика Карелия',
            10597:	'Республика Коми',
            12097:	'Сибирский федеральный округ',
            13781:	'Алтайский край',
            15777:	'Красноярский край',
            12232:	'Иркутская область',
            14580:	'Кемеровская область',
            14804:	'Новосибирская область',
            13356:	'Омская область',
            15593:	'Томская область',
            24584:	'Забайкальский край',
            15295:	'Республика Бурятия',
            12792:	'Республика Алтай',
            12649:	'Республика Тыва',
            12130:	'Республика Хакасия',
            16333:	'Уральский федеральный округ',
            16921:	'Курганская область',
            16827:	'Свердловская область',
            16507:	'Тюменская область',
            16334:	'Ханты-Мансийский автономный округ - Югра',
            16448:	'Ямало-Ненецкий автономный округ',
            17380:	'Челябинская область',
            19099:	'Центральный федеральный округ',
            22729:	'Белгородская область',
            22143:	'Брянская область',
            21258:	'Владимирская область',
            23249:	'Воронежская область',
            23067:	'Ивановская область',
            21386:	'Тверская область',
            20350:	'Калужская область',
            20774:	'Костромская область',
            19479:	'Курская область',
            20018:	'Липецкая область',
            23783:	'г. Москва',
            19100:	'Московская область',
            24262:	'Орловская область',
            22433:	'Рязанская область',
            21792:	'Смоленская область',
            23909:	'Тамбовская область',
            21078:	'Тульская область',
            20670:	'Ярославская область',
            17698:	'Дальневосточный федеральный округ',
            18354:	'Приморский край',
            18540:	'Хабаровский край',
            18776:	'Амурская область',
            24543:	'Камчатский край',
            18239:	'Магаданская область',
            18294:	'Сахалинская область',
            18184:	'Чукотский автономный округ',
            17699:	'Республика Саха (Якутия)',
            18317:	'Еврейская автономная область'}

    mdxQuery = 'SELECT {[Measures].[VALUE]}  ON COLUMNS, ' \
               'NON EMPTY {[Territories].[08-17698], ' \
               '[Territories].[08-91128]} ON ROWS ' \
               'FROM [BLYR01.DB] ' \
               'WHERE ([BGLevels].[09-3])'

    # Sample request
    data = {'dataMartCode': 'BLYR01', 'mdxQuery': mdxQuery}
    r = requests.post('http://conf.test.fm.epbs.ru/mdxexpert/CellsetByMdx', data)
    print(r.text)




















