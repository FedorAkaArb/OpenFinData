import telebot
import datetime
import sqlite3
from telebot import types
from req import main_func
from req import main_place
from req import main_sector
from m2retrieving import M2Retrieving
from m3visualizing import M3Visualizing

API_TOKEN = '231161869:AAFpafehgQl9V-5f6-1KvwjPkzhbgdqDflU'
bot = telebot.TeleBot(API_TOKEN)

# –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
connection_first = sqlite3.connect('subscribe.db')
cursor_first = connection_first.cursor()
k = cursor_first.fetchall()  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
for i in range(len(k)):
    print(k[i][1])
connection_first.commit()
connection_first.close()


# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á–∏—Å–ª–æ–º
def represents_int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False


# –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
@bot.message_handler(commands=['stopfin'])
def repeat_all_messages(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute("SELECT rowid FROM users WHERE userid = " + str(message.chat.id))
    data = cursor.fetchall()
    if len(data) != 0:
        cursor.execute(
            "DELETE FROM users WHERE userid = " + str(message.chat.id))  # —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id,
                         "–ú—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /findata")


# —Å—Ç—Ä–æ–∫–æ–≤—ã–π –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
@bot.message_handler(commands=['custom'])
def send_welcome(message):
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute("SELECT rowid FROM users WHERE userid = " + str(message.chat.id))
    data = cursor.fetchall()

    # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–ø—Ä–æ—Å–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    if len(data) != 0:
        bot.send_message(message.chat.id,
                         "–í—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ –Ω–∞–º –≤–æ–ø—Ä–æ—Å. –°–µ–π—á–∞—Å –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π")
    else:
        s = message.text[8:]
        s1 = main_func(s)
        # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–¥
        s_main = "INSERT INTO users (id, userid, subject, place, year, sector, planned_or_actual) VALUES(NULL, {0}, \"{1}\", \"{2}\", \"{3}\", \"{4}\", \"{5}\")".format(
            str(message.chat.id), str(s1[0]), str(s1[1]), str(s1[2]), str(s1[3]), str(s1[4]))
        cursor.execute(s_main)
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–∫–æ—Ä–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º")


# –∫–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ (choose region)
@bot.message_handler(commands=['cr'])
def send_welcome(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM users WHERE userid = " + str(message.chat.id))
    data = cursor.fetchall()
    if len(data) != 0:
        s = str(message.text)[4:]
        if s == "":
            cursor.execute("UPDATE users SET place=\"" + "null" + "\" WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ!')
        else:
            print(s)
            s = main_place(s)
            if (s != None):

                cursor.execute("UPDATE users SET place=\"" + s + "\" WHERE userid=" + str(message.chat.id) + ";")
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ!')
            else:
                bot.send_message(message.chat.id, "–ë–æ—é—Å—å, —á—Ç–æ –º—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏ üò∞")
    else:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–∞ –∫–æ–º–∞–Ω–¥ /findata. "
                                          "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /findata, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

    con = sqlite3.connect('users.db')
    cursor = con.cursor()
    cursor.execute("SELECT * FROM users WHERE userid = " + str(message.chat.id))
    data = cursor.fetchall()
    con.close()
    k = 0
    for i in data:
        for i1 in i:
            #print(i1)
            if i1 == '0':
                k += 1
    if(k > 2):
        bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–∞–º –Ω–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ú—ã –Ω–µ —Å–º–æ–∂–µ–º –¥–∞—Ç—å –≤–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    else:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –º—ã —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤–∞–º.")
    for i in data:
        for i1 in i:
            pass


# –í–≤–æ–¥ —Å—Ñ–µ—Ä—ã
@bot.message_handler(commands=['thm'])
def send_welcome(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM users WHERE userid = " + str(message.chat.id))
    data = cursor.fetchall()
    print(data)
    if len(data) != 0:
        s = str(message.text)
        ss = s[5:]
        if ss == "":
            cursor.execute("UPDATE users SET thm=\"" + "null" + "\" WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id,
                             "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –≤ —Ü–µ–ª–æ–º, "
                             "–≤–≤–µ–¥–∏—Ç–µ /cr. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ /cr *–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞* "
                             "(–Ω–∞–ø—Ä–∏–º–µ—Ä, /cr –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å):")
        else:
            print(ss)
            ss = main_sector(ss)
            print(ss)
            if (ss == None):
                bot.send_message(message.chat.id, "–ë–æ—é—Å—å, —á—Ç–æ –º—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏ ?.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            else:

                cursor.execute("UPDATE users SET subject=\"" + ss + "\" WHERE userid=" + str(message.chat.id) + ";")
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id,
                                 "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –≤ —Ü–µ–ª–æ–º, "
                                 "–≤–≤–µ–¥–∏—Ç–µ /cr. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ /cr *–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞* "
                                 "(–Ω–∞–ø—Ä–∏–º–µ—Ä, /cr –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å):")
    else:
        bot.send_message(message.chat.id, "–û–π. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–∞ –∫–æ–º–º–∞–Ω–¥ /findata. "
                                          "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–Ω–¥—ã /findata.")


# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, '–Ø ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ OpenFinData. –Ø –º–æ–≥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º '
                                      '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ª—é–±–æ–π –æ–±–ª–∞—Å—Ç–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–æ–¥.\n'
                                      '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–º–∏—Ç–µ /help\n'
                                      '–ß—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç—á–µ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /findata')


# –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–∞ –∏ –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.send_message(message.chat.id, '<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n'
                                      '/start   ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n'
                                      '/findata ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n'
                                      '/thmscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n'
                                      '/unsubscribe', parse_mode='HTML')

"""
@bot.message_handler(commands=['subscribe'])
def send_welcome(message):
    # print(message.chat.id)
    p = message.chat.id
    connection = sqlite3.connect('subscribe.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM users')
    k = cursor.fetchall()
    t = True
    for i in range(len(k)):
        print(k[i][1])
        print(p)
        if (k[i][1] == p):
            t = False
            break
    if (t):
        bot.send_message(message.chat.id, '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É!')
        s = 'INSERT INTO users (id, userid) VALUES(NULL, ' + str(p) + ')'
        cursor.execute(s)
    else:
        bot.send_message(p, "–î–æ–±—Ä–µ–π—à–∏–π –≤–µ—á–µ—Ä–æ—á–µ–∫, –∞ –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É. –ó–∞—á–µ–º —ç—Ç–æ –¥–µ–ª–∞—Ç—å –µ—à–µ —Ä–∞–∑ ?  ")
    connection.commit()
    connection.close()


@bot.message_handler(commands=['unsubscribe'])
def repeat_all_messages(message):
    bot.send_message(message.chat.id,
                     "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—É—Å—Ç—å —ç—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ–π —Å–æ–≤–µ—Å—Ç–∏.–ù–æ –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, —Ç–æ –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /thmscribe")
    connection = sqlite3.connect('subscribe.db')
    cursor = connection.cursor()
    query = "DELETE FROM users WHERE userid = " + str(message.chat.id) + ";"
    cursor.execute(query)
    connection.commit()
    connection.close()
"""

@bot.message_handler(commands=['findata'])
def repeat_all_messages(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM users WHERE userid = " + str(message.chat.id))
    data = cursor.fetchall()

    if len(data) != 0:
        cursor.execute("DELETE FROM users WHERE userid = " + str(message.chat.id))  # —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        connection.commit()
        connection.close()

    s = message.text[9:]
    if (s == ""):
        #bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å:")
        markup = types.ReplyKeyboardMarkup()
        markup.row('–¥–æ—Ö–æ–¥—ã')
        markup.row('—Ä–∞—Å—Ö–æ–¥—ã')
        markup.row('–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç')
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∞–π—Ç–µ", reply_markup=markup)
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        s_main = "INSERT INTO users (id, userid, subject, place, year, sector, planned_or_actual, thm) VALUES(NULL, " + \
                 str(message.chat.id) + ", \"" + str(0) + "\", \"" + str(0) + "\", \"" + str(0) + "\", \"" + str(
            0) + "\", \"" + str(0) + "\", \"" + str(0) + "\")"
        cursor.execute(s_main)
        connection.commit()
        connection.close()

    else:
        s1 = main_func(s)
        s_main = "INSERT INTO users (id, userid, subject, place, year, sector, planned_or_actual) VALUES(NULL, " + \
                     str(message.chat.id) + ", \"" + str(s1[0]) + "\", \"" + str(s1[1]) + "\", \"" + str(
        s1[2]) + "\", \"" + str(s1[3]) + "\", \"" + str(s1[4]) + "\")"
        connection = sqlite3.connect("users.db")
        cursor = connection.cursor()
        cursor.execute(s_main)
        connection.commit()
        connection.close()
        s_mod2 = ""
        s_mod2 += s1[0] + "," + s1[4] + "," + "null" + "," + str(s1[2]) + "," + "null" + "," + s1[1]
        print(s_mod2)
        result = M2Retrieving.get_data(s_mod2)
        if result.status is False:
            bot.send_message(message.chat.id, result.message)
        else:
            bot.send_message(message.chat.id, "–í—Å–µ —Ö–æ—Ä–æ—à–æ")
            print(result.response)
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –°–µ–π—á–∞—Å –º—ã —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤–∞–º.")
            file = open('result.pdf','rb')
            # TODO: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
            # TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏


@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):
    print(message.text)

    markup = types.ReplyKeyboardHide()

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM users WHERE userid = " + str(message.chat.id))
    data = cursor.fetchall()
    print(data)
    k = 0
    for i in data:
        for i1 in i:
            #print(i1)
            if i1 == '0':
                k += 1
    print(k)
    now_date = datetime.date.today()

    if represents_int(message.text) and len(data) != 0:
        i = int(message.text)
        if 2006 < i < 2016:
            cursor.execute("UPDATE users SET year=" + str(i) + " WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id,
                             "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—é–¥–∂–µ—Ç–µ –≤ —Ü–µ–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ /thm. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç "
                             "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /thm *–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, /thm –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ):")
        else:
            bot.send_message(message.chat.id,
                             "–î–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    if (message.text == "–¥–æ—Ö–æ–¥—ã" or message.text == "—Ä–∞—Å—Ö–æ–¥—ã" or message.text == "–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç"
        or message.text == "–Ω–∞–ª–æ–≥–æ–≤—ã–µ" or message.text == "–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ") and (
                len(data) != 0):
        k = message.text
        if(message.text == "–¥–æ—Ö–æ–¥—ã" or message.text == "—Ä–∞—Å—Ö–æ–¥—ã" or message.text == "–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç"):
            cursor.execute("UPDATE users SET subject=\"" + str(k) + "\" WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()
        if(message.text == "–Ω–∞–ª–æ–≥–æ–≤—ã–µ" or message.text == "–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ"):
            cursor.execute("UPDATE users SET planned_or_actual=\"" + str(k) + "\" WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()
        if(k == "—Ä–∞—Å—Ö–æ–¥—ã"):
            #bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø:")
            markup = types.ReplyKeyboardMarkup()
            markup.row('—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ')
            markup.row('–ø–ª–∞–Ω–æ–≤—ã–µ')
            markup.row('—Ç–µ–∫—É—â–∏–µ')
            markup.row('–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')
            bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∞–π—Ç–µ:", reply_markup=markup)
        elif(k == "–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç" or k == "–Ω–∞–ª–æ–≥–æ–≤—ã–µ" or k == "–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ"):
            #bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø:")
            markup = types.ReplyKeyboardMarkup()
            markup.row('–ø–ª–∞–Ω–æ–≤—ã–µ')
            markup.row('—Ç–µ–∫—É—â–∏–µ')
            markup.row("null")
            bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∞–π—Ç–µ:", reply_markup=markup)
        elif(k == "–¥–æ—Ö–æ–¥—ã"):
            markup = types.ReplyKeyboardMarkup()
            markup.row('–Ω–∞–ª–æ–≥–æ–≤—ã–µ')
            markup.row('–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ')
            bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∞–π—Ç–µ:", reply_markup=markup)



    if (message.text == "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ" or message.text == "–ø–ª–∞–Ω–æ–≤—ã–µ" or message.text == "—Ç–µ–∫—É—â–∏–µ" or message.text == "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" or message.text == "null") and (
                len(data) != 0):
        k = 0
        if (message.text == "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ"):
            markup = types.ReplyKeyboardHide()
            k = message.text
            bot.send_message(message.chat.id,
                             "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å 2007 –ø–æ —Ç–µ–∫—É—â–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2010):", reply_markup= markup)
            cursor.execute(
                "UPDATE users SET sector=\"" + str(k) +  "\" WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()



        if (message.text == "–ø–ª–∞–Ω–æ–≤—ã–µ"):
            markup = types.ReplyKeyboardHide()
            k = message.text
            bot.send_message(message.chat.id,
                             "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å 2007 –ø–æ —Ç–µ–∫—É—â–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2010):", reply_markup= markup)
            cursor.execute(
                "UPDATE users SET sector=\"" + str(k) + "\" WHERE userid=" + str(message.chat.id) + ";")

            connection.commit()
            connection.close()

            markup = types.ReplyKeyboardHide()

        if (message.text == "—Ç–µ–∫—É—â–∏–µ" or message.text == "null"):
            markup = types.ReplyKeyboardHide()
            k = message.text
            bot.send_message(message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ " + str(now_date.year), reply_markup=markup)
            cursor.execute(
                "UPDATE users SET sector=\"" + str(k) + "\" WHERE userid=" + str(message.chat.id) + ";")
            cursor.execute(
                "UPDATE users SET year=" + "null" + " WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id,
                             "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—é–¥–∂–µ—Ç–µ –≤ —Ü–µ–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ /thm. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç "
                             "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /thm *–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, /thm –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ):")

        if (message.text == "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"):
            markup = types.ReplyKeyboardHide()
            k = message.text
            bot.send_message(message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ " + str(now_date.year), reply_markup=markup)
            cursor.execute(
                "UPDATE users SET sector=\"" + str(k) + "\" WHERE userid=" + str(message.chat.id) + ";")
            cursor.execute(
                "UPDATE users SET year=" + "null" + " WHERE userid=" + str(message.chat.id) + ";")
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id,
                             "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—é–¥–∂–µ—Ç–µ –≤ —Ü–µ–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ /thm. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç "
                             "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /thm *–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, /thm –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ):")


if __name__ == '__main__':
    bot.polling(none_stop=True)
