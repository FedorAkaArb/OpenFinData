import telebot
import datetime
import sqlite3
import requests
from transliterate import translit as tr
from telebot import types
from m1_req import main_func
from m1_req import main_place
from m2_main import M2Retrieving
from m2_lib import feedback
from m3_main import M3Visualizing
from m1_speechkit import speech_to_text
from config import TELEGRAM_API_TOKEN1
from config import TELEGRAM_API_TOKEN2
from config import TELEGRAM_API_TOKEN_FINAL

# Constants for text and messages
START_MSG = '–Ø - —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Datatron.üòä –°–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ' \
            '–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º –∫–∞–∫ –†–æ—Å—Å–∏–∏ –≤ —Ü–µ–ª–æ–º, —Ç–∞–∫ –∏ –ª—é–±–æ–≥–æ –µ–µ —Ä–µ–≥–∏–æ–Ω–∞.\n\n' \
            '–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–Ω–æ–ø–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞–∂–º–∏—Ç–µ /search. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, ' \
            '–≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–ª–∏ ' \
            '–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?\n\n<i>–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</i>. ' \
            '–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã:\n' \
            '/search —Ä–∞—Å—Ö–æ–¥—ã –ú–æ—Å–∫–≤—ã –Ω–∞ —Å–ø–æ—Ä—Ç –≤ 2013 –≥–æ–¥—É\n' \
            '/search –¥–µ—Ñ–∏—Ü–∏—Ç –Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n\n' \
            '<i>–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º</i>. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤ Telegram –∑–∞–ø–∏—Å—å—é –≥–æ–ª–æ—Å–∞.'

COMMANDS_MSG = '<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n' \
               '/start ‚Äî –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n' \
               '/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n' \
               '/search ‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞'
TERRITORY_MSG = '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –†–æ—Å—Å–∏–∏ –≤ —Ü–µ–ª–æ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /cr ' \
                '–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ /cr *–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞* ' \
                '(–Ω–∞–ø—Ä–∏–º–µ—Ä, /cr –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)'
YEAR_MSG = '–î–∞–Ω–Ω—ã–µ –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?'

ERROR_CR_MSG = '–†–∞–Ω–æ–≤–∞—Ç–æ –≤—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –æ–±–ª–∞—Å—Ç–∏üòè –ù–∞—á–Ω–∏—Ç–µ –ª—É—á—à–µ —Å –∫–æ–º–∞–Ω–¥—ã /search'
ERROR_NO_UNDERSTANDING = '–ë–æ—é—Å—å, —á—Ç–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª üò∞'
ERROR_NOT_FULL_INFO = '–ü–æ—Ö–æ–∂–µ, –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüôÉ –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–∞–≤ /search'
ERROR_NO_DATA_THIS_YEAR = '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ c 2007 –ø–æ ' + str(datetime.datetime.now().year) + 'üôà'
ERROR_CHECK_INPUT = '–ö–∞–∂–µ—Ç—Å—è, –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æüîé'
ERROR_CANNOT_UNDERSTAND_VOICE = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—èüò• –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
ERROR_NULL_DATA_FOR_SUCH_REQUEST_LONG = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Çü§ï –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å! –ï—Å—Ç—å –º–Ω–æ–≥–æ ' \
                                        '–¥—Ä—É–≥–∏—Ö —Ü–∏—Ñ—Äüòâ –ù–∞–∂–º–∏—Ç–µ /search'
ERROR_NULL_DATA_FOR_SUCH_REQUEST_SHORT = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Çü§ï (0 —Ä—É–±–ª–µ–π)'

MSG_BEFORE_THEMES = '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!'
MSG_BEFORE_SPHERE = '–ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
MSG_BEFORE_NALOG_NENALOG = '–ù–∞–ª–æ–≥–æ–≤—ã–µ –∏–ª–∏ –Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ?'
MSG_BEFORE_TYPE_EXPENDITURES = '–ü–æ—Å–ª–µ —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:'
MSG_BEFORE_TYPE_PROFIT = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:'
MSG_AFTER_VOICE_INPUT = '–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞!'
MSG_WE_WILL_FORM_DATA_AND_SEND_YOU = "–°–ø–∞—Å–∏–±–æ! –°–µ–π—á–∞—Å –º—ã —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤–∞–ºüôå"

API_TOKEN = TELEGRAM_API_TOKEN_FINAL
bot = telebot.TeleBot(API_TOKEN)

# –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
connection_first = sqlite3.connect('subscribe.db')
cursor_first = connection_first.cursor()
k = cursor_first.fetchall()  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
for i in range(len(k)):
    print(k[i][1])
connection_first.commit()
connection_first.close()


# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á–∏—Å–ª–æ–º
def represents_int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False


# –∫–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ (choose region)
@bot.message_handler(commands=['cr'])
def send_welcome(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM users WHERE userid = ' + str(message.chat.id))
    data = cursor.fetchall()
    if len(data) != 0:
        s = str(message.text)[4:]
        if s == '' or main_place(s) is not None:
            if s == '':
                cursor.execute('UPDATE users SET place=\'' + 'null' + '\' WHERE userid=' + str(message.chat.id) + ';')
                connection.commit()
                connection.close()

            if main_place(s) is not None:
                s = main_place(s)
                cursor.execute('UPDATE users SET place=\'' + s + '\' WHERE userid=' + str(message.chat.id) + ';')
                connection.commit()
                connection.close()

            con = sqlite3.connect('users.db')
            cursor = con.cursor()
            cursor.execute('SELECT * FROM users WHERE userid = ' + str(message.chat.id))
            data = cursor.fetchall()
            con.close()
            final_result_formatting(data, message)
        else:
            bot.send_message(message.chat.id, ERROR_NO_UNDERSTANDING)
    else:
        bot.send_message(message.chat.id, ERROR_CR_MSG)


# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, START_MSG, parse_mode='HTML')


# –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.send_message(message.chat.id, COMMANDS_MSG, parse_mode='HTML')


@bot.message_handler(commands=['search'])
def repeat_all_messages(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM users WHERE userid = ' + str(message.chat.id))
    data = cursor.fetchall()

    if len(data) != 0:
        cursor.execute(
            'DELETE FROM users WHERE userid = ' + str(message.chat.id))  # —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —é–∑–µ—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        connection.commit()
        connection.close()

    s = message.text[8:]
    if s == '':
        markup = types.ReplyKeyboardMarkup()
        markup.row('–¥–æ—Ö–æ–¥—ã')
        markup.row('—Ä–∞—Å—Ö–æ–¥—ã')
        markup.row('–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç')
        bot.send_message(message.chat.id, MSG_BEFORE_THEMES, reply_markup=markup)
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        s_main = 'INSERT INTO users (id, userid, subject, place, year, sector, planned_or_actual, thm) VALUES(NULL, ' + \
                 str(message.chat.id) + ', \'' + str(0) + '\', \'' + str(0) + '\', \'' + str(0) + '\', \'' + str(
            0) + '\', \'' + str(0) + '\', \'' + str(0) + '\')'
        cursor.execute(s_main)
        connection.commit()
        connection.close()

    else:
        s1 = main_func(s)
        s_mod2 = forming_string_from_neural(s1)
        querying_and_visualizing(message, s_mod2)


@bot.message_handler(content_types=['text'])
def repeat_all_messages(message):
    markup = types.ReplyKeyboardHide()

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM users WHERE userid = ' + str(message.chat.id))
    data = cursor.fetchall()
    k = 0
    for i in data:
        for i1 in i:
            if i1 == '0':
                k += 1

    now_date = datetime.date.today()

    if represents_int(message.text) and len(data) != 0:
        i = int(message.text)
        markup = types.ReplyKeyboardHide()
        if 2006 < i <= now_date.year:
            # Processing 2016 year
            if i == 2016:
                i = 'null'

            cursor.execute('UPDATE users SET year=' + str(i) + ' WHERE userid=' + str(message.chat.id) + ';')
            connection.commit()
            connection.close()
            cr_markup(message)

        else:
            bot.send_message(message.chat.id, ERROR_NO_DATA_THIS_YEAR, reply_markup=markup)

    elif (message.text == '–¥–æ—Ö–æ–¥—ã' or message.text == '—Ä–∞—Å—Ö–æ–¥—ã' or message.text == '–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç'
          or message.text == '–Ω–∞–ª–æ–≥–æ–≤—ã–µ' or message.text == '–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ' or message.text == '–≤—Å–µ') and (
                len(data) != 0):
        k = message.text
        if message.text == '–¥–æ—Ö–æ–¥—ã' or message.text == '—Ä–∞—Å—Ö–æ–¥—ã' or message.text == '–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç':
            cursor.execute('UPDATE users SET subject=\'' + str(k) + '\' WHERE userid=' + str(message.chat.id) + ';')
            connection.commit()
            connection.close()
        if message.text == '–Ω–∞–ª–æ–≥–æ–≤—ã–µ' or message.text == '–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ' or message.text == '–≤—Å–µ':
            if message.text == '–≤—Å–µ':
                k_clone = 'null'
            elif message.text == '–Ω–∞–ª–æ–≥–æ–≤—ã–µ':
                k_clone = '–Ω–∞–ª–æ–≥–æ–≤—ã–π'
            else:
                k_clone = '–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–π'
            cursor.execute(
                'UPDATE users SET planned_or_actual=\'' + k_clone + '\' WHERE userid=' + str(message.chat.id) + ';')
            connection.commit()
            connection.close()
        if k == '—Ä–∞—Å—Ö–æ–¥—ã':
            national_issues_button = types.InlineKeyboardButton('–û–±—â–µ–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='2')
            national_defence_button = types.InlineKeyboardButton('–ù–∞—Ü. –æ–±–æ—Ä–æ–Ω–∞', callback_data='3')
            law_enforcement_button = types.InlineKeyboardButton('–ù–∞—Ü. –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', callback_data='4')
            national_economy_button = types.InlineKeyboardButton('–ù–∞—Ü. —ç–∫–æ–Ω–æ–º–∏–∫–∞', callback_data='5')
            hcs_button = types.InlineKeyboardButton('–ñ–ö–•', callback_data='6')
            environmental_protection_button = types.InlineKeyboardButton('–ó–∞—â–∏—Ç–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã', callback_data='7')
            education_button = types.InlineKeyboardButton('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', callback_data='8')
            culture_and_cinematography_button = types.InlineKeyboardButton('–ö—É–ª—å—Ç—É—Ä–∞', callback_data='9')
            health_care_button = types.InlineKeyboardButton('–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', callback_data='10')
            social_policy_button = types.InlineKeyboardButton('–°–æ—Ü. –ø–æ–ª–∏—Ç–∏–∫–∞', callback_data='11')
            physical_culture_and_sport = types.InlineKeyboardButton('–°–ø–æ—Ä—Ç', callback_data='12')
            none_button = types.InlineKeyboardButton('–†–∞—Å—Ö–æ–¥—ã –≤ —Ü–µ–ª–æ–º', callback_data='13')

            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(national_issues_button)
            keyboard.add(national_defence_button, education_button)
            keyboard.add(law_enforcement_button, national_economy_button)
            keyboard.add(physical_culture_and_sport, culture_and_cinematography_button, hcs_button)
            keyboard.add(environmental_protection_button)
            keyboard.add(health_care_button, social_policy_button)
            keyboard.add(none_button)

            bot.send_message(message.chat.id, MSG_BEFORE_SPHERE, reply_markup=keyboard)
            markup = types.ReplyKeyboardMarkup()
            markup.row('–ø–ª–∞–Ω–æ–≤—ã–µ')
            markup.row('—Ç–µ–∫—É—â–∏–µ')
            markup.row('—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ')
            bot.send_message(message.chat.id, MSG_BEFORE_TYPE_EXPENDITURES, reply_markup=markup)
        elif k == '–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç' or k == '–Ω–∞–ª–æ–≥–æ–≤—ã–µ' or k == '–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ' or k == '–≤—Å–µ':
            markup = types.ReplyKeyboardMarkup()
            if k == '–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç':
                markup.row('–ø–ª–∞–Ω–æ–≤—ã–π')
                markup.row('—Ç–µ–∫—É—â–∏–π')
                markup.row('—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π')
            else:
                markup.row('–ø–ª–∞–Ω–æ–≤—ã–µ')
                markup.row('—Ç–µ–∫—É—â–∏–µ')
                markup.row('—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ')
            bot.send_message(message.chat.id, MSG_BEFORE_TYPE_PROFIT, reply_markup=markup)
        elif k == '–¥–æ—Ö–æ–¥—ã':
            markup = types.ReplyKeyboardMarkup()
            markup.row('–Ω–∞–ª–æ–≥–æ–≤—ã–µ')
            markup.row('–Ω–µ–Ω–∞–ª–æ–≥–æ–≤—ã–µ')
            markup.row('–≤—Å–µ')
            bot.send_message(message.chat.id, MSG_BEFORE_NALOG_NENALOG, reply_markup=markup)

    elif (message.text == '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ' or message.text == '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π' or
                  message.text == '–ø–ª–∞–Ω–æ–≤—ã–µ' or message.text == '–ø–ª–∞–Ω–æ–≤—ã–π' or
                  message.text == '—Ç–µ–∫—É—â–∏–µ' or message.text == '—Ç–µ–∫—É—â–∏–π' or
                  message.text == '–≤—Å–µ') and (len(data) != 0):
        k = 0
        if message.text == '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ' or message.text == '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π':
            k = '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π'

            year_markup(message)

            cursor.execute(
                'UPDATE users SET sector=\'' + str(k) + '\' WHERE userid=' + str(message.chat.id) + ';')
            connection.commit()
            connection.close()

        if message.text == '–ø–ª–∞–Ω–æ–≤—ã–µ' or message.text == '–ø–ª–∞–Ω–æ–≤—ã–π':
            if message.text == '–ø–ª–∞–Ω–æ–≤—ã–µ':
                k = '–ø–ª–∞–Ω–æ–≤—ã–π'
            elif message.text == '–ø–ª–∞–Ω–æ–≤—ã–π':
                k = message.text

            year_markup(message)

            cursor.execute(
                'UPDATE users SET sector=\'' + str(k) + '\' WHERE userid=' + str(message.chat.id) + ';')

            connection.commit()
            connection.close()

        if message.text == '—Ç–µ–∫—É—â–∏–µ' or message.text == '—Ç–µ–∫—É—â–∏–π':
            markup = types.ReplyKeyboardHide()
            k = '—Ç–µ–∫—É—â–∏–π'
            cursor.execute(
                'UPDATE users SET sector=\'' + str(k) + '\' WHERE userid=' + str(message.chat.id) + ';')
            cursor.execute(
                'UPDATE users SET year=' + 'null' + ' WHERE userid=' + str(message.chat.id) + ';')
            connection.commit()
            connection.close()
            cr_markup(message)

    elif (message.text == '–†–§'
          or message.text == '–ú–æ—Å–∫–≤–∞'
          or message.text == '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
          or message.text == '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç'):
        if message.text == '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç':
            cursor.execute('UPDATE users SET place=\'' + 'null' + '\' WHERE userid=' + str(message.chat.id) + ';')
            cursor.execute('SELECT * FROM users WHERE userid = ' + str(message.chat.id))
            data = cursor.fetchall()
            connection.commit()
            connection.close()
        elif (message.text == '–†–§'
              or message.text == '–ú–æ—Å–∫–≤–∞'
              or message.text == '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'):
            s = main_place(message.text)
            cursor.execute('UPDATE users SET place=\'' + s + '\' WHERE userid=' + str(message.chat.id) + ';')
            cursor.execute('SELECT * FROM users WHERE userid = ' + str(message.chat.id))
            data = cursor.fetchall()
            connection.commit()
            connection.close()

        final_result_formatting(data, message)


    elif message.text == 'null':
        cursor.execute('UPDATE users SET place=\'' + 'null' + '\' WHERE userid=' + str(message.chat.id) + ';')
        connection.commit()
        connection.close()

    elif message.text == '–î—Ä—É–≥–∏–µ':
        markup = types.ReplyKeyboardHide()
        bot.send_message(message.chat.id, TERRITORY_MSG, reply_markup=markup)

    else:
        bot.send_message(message.chat.id, ERROR_CHECK_INPUT)


@bot.inline_handler(lambda query: len(query.query) >= 0)
def query_text(query):
    text = query.query
    input_message_content = text
    s1 = main_func(text)
    s_mod2 = forming_string_from_neural(s1)
    print(s_mod2)
    result_array = []
    result = M2Retrieving.get_data(s_mod2)
    if result.status is False:
        msg = types.InlineQueryResultArticle(id='0',
                                             title='–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞',
                                             input_message_content=types.InputTextMessageContent(
                                                 message_text=input_message_content + '\n–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—èüò¢'
                                             ))
        result_array.append(msg)
        bot.answer_inline_query(query.id, result_array)

    else:
        m3_result = M3Visualizing.create_response(query.id, result.response, result.theme, visualization=False)
        try:
            if m3_result.data is False:
                msg_append_text = ': ' + ERROR_NULL_DATA_FOR_SUCH_REQUEST_SHORT
                title = '–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç'
            else:
                msg_append_text = ':\n' + str(m3_result.number)
                title = str(m3_result.number)

            msg = types.InlineQueryResultArticle(id='1',
                                                 title=title,
                                                 input_message_content=types.InputTextMessageContent(
                                                     message_text=input_message_content + msg_append_text),
                                                 )
            result_array.append(msg)

        finally:
            bot.answer_inline_query(query.id, result_array)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        cursor.execute('SELECT * FROM users WHERE userid = ' + str(call.message.chat.id))
        data = cursor.fetchall()
        if call.data == '2':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–û–±—â–µ–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"')
        elif call.data == '3':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±–æ—Ä–æ–Ω—É"')
        elif call.data == '4':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã"')
        elif call.data == '5':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É"')
        elif call.data == '6':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ñ–ö–•"')
        elif call.data == '7':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ó–∞—â–∏—Ç—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã"')
        elif call.data == '8':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"')
        elif call.data == '9':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ö—É–ª—å—Ç—É—Ä—É"')
        elif call.data == '10':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"')
        elif call.data == '11':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–æ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É"')
        elif call.data == '12':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + call.data + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–ø–æ—Ä—Ç –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫—É–ª—å—Ç—É—Ä—É"')
        elif call.data == '13':
            if len(data) != 0:
                cursor.execute('UPDATE users SET thm=\'' + 'null' + '\' WHERE userid=' + str(
                    call.message.chat.id) + ';')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã –≤—ã–±—Ä–∞–ª–∏ "–†–∞—Å—Ö–æ–¥—ã –≤ —Ü–µ–ª–æ–º"')
        connection.commit()
        connection.close()


@bot.message_handler(content_types=['voice'])
def voice_processing(message):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute(
        'DELETE FROM users WHERE userid = ' + str(message.chat.id))
    connection.commit()
    connection.close()

    file_info = bot.get_file(message.voice.file_id)
    file = requests.get(
        'https://api.telegram.org/file/bot{0}/{1}'.format(TELEGRAM_API_TOKEN_FINAL, file_info.file_path))
    text = speech_to_text(bytes=file.content)

    if text is not None:
        msg = '–í–∞—à –∑–∞–ø—Ä–æ—Å: '' + text + ''. '
        bot.send_message(message.chat.id, msg)
        s1 = main_func(text)
        s_mod2 = forming_string_from_neural(s1)
        querying_and_visualizing(message, s_mod2)
    else:
        msg = ERROR_CANNOT_UNDERSTAND_VOICE
        bot.send_message(message.chat.id, msg)


def year_markup(message):
    markup = types.ReplyKeyboardMarkup()
    y2007 = types.KeyboardButton('2007')
    y2008 = types.KeyboardButton('2008')
    y2009 = types.KeyboardButton('2009')
    y2010 = types.KeyboardButton('2010')
    y2011 = types.KeyboardButton('2011')
    y2012 = types.KeyboardButton('2012')
    y2013 = types.KeyboardButton('2013')
    y2014 = types.KeyboardButton('2014')
    y2015 = types.KeyboardButton('2015')
    y2016 = types.KeyboardButton('2016')
    markup.row(y2007, y2008, y2009)
    markup.row(y2010, y2011, y2012)
    markup.row(y2013, y2014, y2015)
    markup.row(y2016)
    bot.send_message(message.chat.id, YEAR_MSG, reply_markup=markup)


def cr_markup(message):
    markup = types.ReplyKeyboardMarkup()
    rf_b = types.KeyboardButton('–†–§')
    moscow_b = types.KeyboardButton('–ú–æ—Å–∫–≤–∞')
    m_region_b = types.KeyboardButton('–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å')
    other_b = types.KeyboardButton('–î—Ä—É–≥–∏–µ')
    null_b = types.KeyboardButton('–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç')
    markup.row(rf_b, moscow_b)
    markup.row(null_b, m_region_b)
    markup.row(other_b)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é:', reply_markup=markup)


def file_naming(request_string):
    request_string = tr(request_string, 'ru', reversed=True)
    filename = request_string.replace('null', '')
    filename = filename.replace(',', '_')
    filename = filename.replace('__', '_')
    filename = filename.replace('__', '_')

    if filename[len(filename) - 1] == '_':
        filename = filename[:len(filename) - 1]

    filename_svg = 'diagram_' + filename + '.svg'
    filename_pdf = 'table_' + filename + '.pdf'
    names = [filename_svg, filename_pdf]
    return names


def forming_string_from_neural(s1):
    s_mod2 = ''
    if s1[0] == '—Ä–∞—Å—Ö–æ–¥—ã':
        s_mod2 += s1[0] + ',' + s1[4] + ',' + 'null' + ',' + str(s1[2]) + ',' + str(s1[3]) + ',' + s1[1]
    elif s1[0] == '–¥–æ—Ö–æ–¥—ã':
        s_mod2 += s1[0] + ',' + s1[4] + ',' + str(s1[3]) + ',' + str(s1[2]) + ',' + 'null' + ',' + s1[1]
    elif s1[0] == '–¥–µ—Ñ–∏—Ü–∏—Ç':
        s_mod2 += s1[0] + ',' + s1[4] + ',' + 'null' + ',' + str(s1[2]) + ',' + 'null' + ',' + s1[1]
    return s_mod2


def querying_and_visualizing(message, s_mod2):
    markup = types.ReplyKeyboardHide()
    print(s_mod2)
    result = M2Retrieving.get_data(s_mod2)
    if result.status is False:
        bot.send_message(message.chat.id, result.message, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, MSG_WE_WILL_FORM_DATA_AND_SEND_YOU, reply_markup=markup)
        names = file_naming(s_mod2)
        m3_result = M3Visualizing.create_response(message.chat.id, result.response, result.theme,
                                                  filename_svg=names[0], filename_pdf=names[1])
        if m3_result.data is False:
            bot.send_message(message.chat.id, ERROR_NULL_DATA_FOR_SUCH_REQUEST_LONG)
        else:
            if m3_result.is_file is False:
                bot.send_message(message.chat.id, m3_result.number)
            else:
                path = m3_result.path + '\\'
                bot.send_message(message.chat.id, m3_result.number)
                file1 = open(path + names[0], 'rb')
                file2 = open(path + names[1], 'rb')
                bot.send_document(message.chat.id, file1)
                bot.send_document(message.chat.id, file2)


def final_result_formatting(data, message):
    k = 0
    for i in data:
        for i1 in i:
            # print(i1)
            if i1 == '0':
                k += 1
    if k > 2:
        bot.send_message(message.chat.id, ERROR_NOT_FULL_INFO, reply_markup=types.ReplyKeyboardHide())
    else:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        s_main = 'INSERT INTO users (id, userid, subject, place, year, sector, planned_or_actual, thm) VALUES(NULL, ' + \
                 str(message.chat.id) + ', \'' + str(0) + '\', \'' + str(0) + '\', \'' + str(
            0) + '\', \'' + str(
            0) + '\', \'' + str(0) + '\', \'' + str(0) + '\')'
        cursor.execute(s_main)
        connection.commit()
        connection.close()

        new_data = []
        count = 0
        while count <= 7:
            for item in data:
                new_data.append(item[count])
                count += 1

        for n, i in enumerate(new_data):
            if i == 0 or i == '0' or i is None:
                new_data[n] = 'null'
            if i == '–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç':
                new_data[n] = '–¥–µ—Ñ–∏—Ü–∏—Ç'

        new_data[3] = new_data[3].lower()
        s_mod2, filename1, filename2 = '', '', ''
        s_mod2 += str(new_data[2]) + ',' + str(new_data[5]) + ',' + str(new_data[6]) + ',' + str(
            new_data[4]) + ',' + str(
            new_data[7]) + ',' + str(new_data[3])

        querying_and_visualizing(message, s_mod2)


if __name__ == '__main__':
    bot.polling(none_stop=True)
